[tool.ruff]
# Exclude a variety of commonly ignored directories.
include = [
    "parsons/**/*.py",
    "test/**/*.py",
    "useful_resources/**/*.py"
]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Default line length is 88 
# Changed to 100 to match previous pyproject black config
line-length = 100
indent-width = 4

# Assume Python 3.8
target-version = "py39"

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    "ARG", # flake8-unused-arguments (ARG)
    "B", # flake8-bugbear (B)
    "BLE", # flake8-blind-except (BLE)
    "C4", # flake8-comprehensions (C4)
    # "D", # pydocstyle (D)
    "DTZ", # flake8-datetimez (DTZ)
    "E", # pycodestyle errors
    "EM", # flake8-errmsg (EM)
    "F", # Pyflakes (F)
    "G", # flake8-logging-format (G)
    "I", # isort (I)
    "ISC", # flake8-implicit-str-concat (ISC)
    "ICN", # flake8-import-conventions (ICN)
    "LOG", # flake8-logging (LOG)
    "N", # pep8-naming (N)
    "PT", # flake8-pytest-style (PT)
    "PTH", # flake8-use-pathlib (PTH)
    "Q", # flake8-quotes (Q)
    "RET", # flake8-return (RET)
    "RUF", # Ruff-specific rules (RUF)
    "RSE", # flake8-raise (RSE)
    "SIM", # flake8-simplify (SIM)
    "SLF", # flake8-self (SLF)
    "TC", # flake8-type-checking (TC)
    "TID", # flake8-tidy-imports (TID)
    "T20", # flake8-print (T20)
    "UP", # pyupgrade (UP)
    "W", # pycodestyle warnings
    "YTT", # flake8-2020 (YTT)
]
ignore = [
    "D100", # undocumented-public-module (D100)
	"D103", # undocumented-public-function (D103)
	"D104", # undocumented-public-package (D104)
	"D203", # incorrect-blank-line-before-class (D203)
	"D212", # multi-line-summary-first-line (D212)
    "E501", # line-too-long (E501)
    "RUF001", # ambiguous-unicode-character-string (RUF001)
    "RUF002", # ambiguous-unicode-character-docstring (RUF002)
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[tool.pytest.ini_options]
addopts = "-rf --cov=parsons -n auto"
testpaths = [
    "test",
]
filterwarnings = [
    # Warnings triggered by libraries we use (not our own code)
    "ignore:invalid escape sequence:SyntaxWarning", # typically due to using "/" in docstrings that aren't raw strings
    "ignore:invalid escape sequence:DeprecationWarning", # typically due to using "/" in docstrings that aren't raw strings
    "ignore:Use ProtectionLevel enum instead:DeprecationWarning", # braintree throws these
    "ignore:Use protection_level parameter instead:DeprecationWarning", # braintree throws these
    "ignore:Argument login_or_token is deprecated:DeprecationWarning",
]

[tool.bandit]
exclude_dirs = [
    ".venv/"
]

[tool.isort]
profile = "hug"
src_paths = [
    "parsons/",
    "test/",
    "useful_resources/"
]

[tool.coverage.run]
branch = true
relative_files = true

[tool.coverage.paths]
source = [
    "parsons/",
    ]